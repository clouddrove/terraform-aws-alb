---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform AWS ALB

# License of this project
license: "MIT"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-alb

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v0.15-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-MIT-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  This terraform module is used to create ALB on AWS.

# extra content
include:
  - "terraform.md"

# How to use this project
usage : |-
  Here are examples of how you can use this module in your inventory structure:
  ### ALB Example
  ```hcl
    module "alb" {
      source                     = "clouddrove/alb/aws"
      version                    = "0.15.0"
      name                       = "alb"
      internal                   = false
      load_balancer_type         = "application"
      instance_count             = module.ec2.instance_count
      security_groups            = [module.ssh.security_group_ids, module.http-https.security_group_ids]
      subnets                    = module.public_subnets.public_subnet_id
      enable_deletion_protection = false
      target_id                  = module.ec2.instance_id
      vpc_id                     = module.vpc.vpc_id
      https_enabled              = true
      http_enabled               = true
      https_port                 = 443
      listener_type              = "forward"
      listener_certificate_arn   = "arn:aws:acm:eu-west-1:924144197303:certificate/0418d2ba-91f7-4196-991b-28b5c60cd4cf"
      target_group_port          = 80
      target_groups  = [
        {
          backend_protocol     = "HTTP"
          backend_port         = 80
          target_type          = "instance"
          deregistration_delay = 300
          health_check = {
            enabled             = true
            interval            = 30
            path                = "/"
            port                = "traffic-port"
            healthy_threshold   = 3
            unhealthy_threshold = 3
            timeout             = 10
            protocol            = "HTTP"
            matcher             = "200-399"
          }
        }
      ]
    }
  ```

  ### NLB Example
  ```hcl
    module "alb" {
      source                     = "clouddrove/alb/aws"
      version                    = "0.15.0"
      name                       = "nlb"
      internal                   = false
      load_balancer_type         = "application"
      instance_count             = module.ec2.instance_count
      subnets                    = module.public_subnets.public_subnet_id
      enable_deletion_protection = false
      target_id                  = module.ec2.instance_id
      vpc_id                     = module.vpc.vpc_id
      http_tcp_listeners = [
        {
          port               = 80
          protocol           = "TCP"
          target_group_index = 0
        },
      ]

      https_listeners = [
        {
          port               = 443
          protocol           = "TLS"
          certificate_arn    = "arn:aws:acm:eu-west-1:924144197303:certificate/0418d2ba-91f7-4196-991b-28b5c60cd4cf"
          target_group_index = 1
        },
      ]

      target_groups = [
        {
          backend_protocol = "TCP"
          backend_port     = 80
          target_type      = "instance"
        },
        {
          backend_protocol = "TLS"
          backend_port     = 443
          target_type      = "instance"
        },
      ]
    }
  ```

  ### CLB Example
  ```hcl
    module "clb" {
    source                     = "clouddrove/alb/aws"
    version                    = "0.15.0"
    name                       = "clb"

    load_balancer_type = "classic"
    internal        = false
    target_id       = module.ec2.instance_id
    security_groups = [module.ssh.security_group_ids, module.http_https.security_group_ids]
    subnets         = module.public_subnets.public_subnet_id

    listeners = [
    {
    lb_port            = 22000
    lb_protocol        = "TCP"
    instance_port      = 22000
    instance_protocol  = "TCP"
    ssl_certificate_id = null
    },
    {
    lb_port            = 4444
    lb_protocol        = "TCP"
    instance_port      = 4444
    instance_protocol  = "TCP"
    ssl_certificate_id = null
    }
    ]

    health_check_target              = "TCP:4444"
    health_check_timeout             = 10
    health_check_interval            = 30
    health_check_unhealthy_threshold = 5
    health_check_healthy_threshold   = 5
  }
  ```
